name: Daily Surf Report

# Controls when the workflow will run
on:
  # Schedule the workflow to run daily.
  # This example runs at midnight UTC every day.
  # You can adjust the 'cron' expression for a different time.
  # cron syntax: minute hour day_of_month month day_of_week
  # Learn more: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  schedule:
    - cron: '0 20 * * *' # Runs at 00:00 UTC daily

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: # <-- This links the job to an environment
      name: production
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      # Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

- name: Install Google Chrome and Chromedriver # Update step name
        run: |
          # Add Google's official Linux repository
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

          # Update apt-get
          sudo apt-get update

          # Install google-chrome-stable and chromium-chromedriver
          # Install google-chrome-stable first
          sudo apt-get install -y --no-install-recommends google-chrome-stable

          # Now install chromium-chromedriver separately to ensure it's present
          # It might have been installed already as a recommended package with google-chrome-stable,
          # but reinstalling ensures it's there after any potential removal attempts.
          sudo apt-get install -y chromium-chromedriver

          # Attempt to remove chromium-browser only, without removing its dependents like the driver
          # Use purge to remove config files too, just in case
          # We are more specific with the remove command
          sudo apt-get remove -y --purge chromium-browser || true # Removed the || true initially, but let's keep it safe

          # Verify installation paths
          which google-chrome
          which chromedriver
          ls -l /usr/bin/google-chrome
          file /usr/bin/google-chrome
          ls -l $(which chromedriver) # Verify chromedriver presence after removals


      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
      - name: Debug Secret Lengths # Temporary debugging step
        run: |
          echo "Checking lengths of environment variables from secrets:"
          # Define the list of environment variable names to check
          VARS_TO_CHECK="OPEN_ROUTER_API_KEY STATION_NUMBER SMTPSERVER SMTPORT SENDEREMAIL RECEIVEREMAIL EMAILPASSWORD browser model"

          # Loop through each variable name and print its length
          for var_name in $VARS_TO_CHECK; do
            # Get the value of the environment variable
            # Use '${!var_name}' to get the value of the variable whose name is stored in var_name
            # Use '-z' check and default to empty string in case the variable is literally not set
            var_value="${!var_name:-}"
            # Print the variable name and the length of its value
            echo "$var_name Length: ${#var_value}"
          done
        env:
          # Explicitly pass all the secrets as environment variables to this step
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
          STATION_NUMBER: ${{ secrets.STATION_NUMBER }}
          SMTPSERVER: ${{ secrets.SMTPSERVER }}
          SMTPORT: ${{ secrets.SMTPORT }}
          SENDEREMAIL: ${{ secrets.SENDEREMAIL }}
          RECEIVEREMAIL: ${{ secrets.RECEIVEREMAIL }}
          EMAILPASSWORD: ${{ secrets.EMAILPASSWORD }}
          browser: ${{ secrets.browser }}
          model: ${{ secrets.model }}
  
      - name: Run script
        run: |
          python -m sources.beachbot.main
        env:
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
          STATION_NUMBER: ${{ secrets.STATION_NUMBER }}
          SMTPSERVER: ${{ secrets.SMTPSERVER }}
          SMTPORT: ${{ secrets.SMTPORT }}
          SENDEREMAIL: ${{ secrets.SENDEREMAIL }}
          RECEIVEREMAIL: ${{ secrets.RECEIVEREMAIL }}
          EMAILPASSWORD: ${{ secrets.EMAILPASSWORD }}
          browser: ${{ secrets.browser }}
          model: ${{ secrets.model }}

      - name: Upload Logs Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: workflow-logs
          path: run.log
